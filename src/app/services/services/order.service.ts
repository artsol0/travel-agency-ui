/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createNewOrder } from '../fn/order/create-new-order';
import { CreateNewOrder$Params } from '../fn/order/create-new-order';
import { DataResponseOrderDto } from '../models/data-response-order-dto';
import { DataResponsePageOrderDto } from '../models/data-response-page-order-dto';
import { deleteOrder } from '../fn/order/delete-order';
import { DeleteOrder$Params } from '../fn/order/delete-order';
import { getAllOrders } from '../fn/order/get-all-orders';
import { GetAllOrders$Params } from '../fn/order/get-all-orders';
import { getAllOrders1 } from '../fn/order/get-all-orders-1';
import { GetAllOrders1$Params } from '../fn/order/get-all-orders-1';
import { getCurrentUserOrders } from '../fn/order/get-current-user-orders';
import { GetCurrentUserOrders$Params } from '../fn/order/get-current-user-orders';
import { MessageResponse } from '../models/message-response';
import { payForOrder } from '../fn/order/pay-for-order';
import { PayForOrder$Params } from '../fn/order/pay-for-order';
import { updateOrderStatus } from '../fn/order/update-order-status';
import { UpdateOrderStatus$Params } from '../fn/order/update-order-status';


/**
 * HTTP methods
 */
@Injectable({ providedIn: 'root' })
export class OrderService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `payForOrder()` */
  static readonly PayForOrderPath = '/api/v1/orders/pay/{voucherId}/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `payForOrder()` instead.
   *
   * This method doesn't expect any request body.
   */
  payForOrder$Response(params: PayForOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<DataResponseOrderDto>> {
    return payForOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `payForOrder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  payForOrder(params: PayForOrder$Params, context?: HttpContext): Observable<DataResponseOrderDto> {
    return this.payForOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<DataResponseOrderDto>): DataResponseOrderDto => r.body)
    );
  }

  /** Path part for operation `createNewOrder()` */
  static readonly CreateNewOrderPath = '/api/v1/orders/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createNewOrder()` instead.
   *
   * This method doesn't expect any request body.
   */
  createNewOrder$Response(params: CreateNewOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<DataResponseOrderDto>> {
    return createNewOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createNewOrder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createNewOrder(params: CreateNewOrder$Params, context?: HttpContext): Observable<DataResponseOrderDto> {
    return this.createNewOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<DataResponseOrderDto>): DataResponseOrderDto => r.body)
    );
  }

  /** Path part for operation `updateOrderStatus()` */
  static readonly UpdateOrderStatusPath = '/api/v1/orders/update/{voucherId}/{userId}/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateOrderStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateOrderStatus$Response(params: UpdateOrderStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<DataResponseOrderDto>> {
    return updateOrderStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateOrderStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateOrderStatus(params: UpdateOrderStatus$Params, context?: HttpContext): Observable<DataResponseOrderDto> {
    return this.updateOrderStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<DataResponseOrderDto>): DataResponseOrderDto => r.body)
    );
  }

  /** Path part for operation `getCurrentUserOrders()` */
  static readonly GetCurrentUserOrdersPath = '/api/v1/orders/my';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCurrentUserOrders()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentUserOrders$Response(params?: GetCurrentUserOrders$Params, context?: HttpContext): Observable<StrictHttpResponse<DataResponsePageOrderDto>> {
    return getCurrentUserOrders(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCurrentUserOrders$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentUserOrders(params?: GetCurrentUserOrders$Params, context?: HttpContext): Observable<DataResponsePageOrderDto> {
    return this.getCurrentUserOrders$Response(params, context).pipe(
      map((r: StrictHttpResponse<DataResponsePageOrderDto>): DataResponsePageOrderDto => r.body)
    );
  }

  /** Path part for operation `getAllOrders()` */
  static readonly GetAllOrdersPath = '/api/v1/orders/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllOrders()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrders$Response(params: GetAllOrders$Params, context?: HttpContext): Observable<StrictHttpResponse<DataResponsePageOrderDto>> {
    return getAllOrders(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllOrders$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrders(params: GetAllOrders$Params, context?: HttpContext): Observable<DataResponsePageOrderDto> {
    return this.getAllOrders$Response(params, context).pipe(
      map((r: StrictHttpResponse<DataResponsePageOrderDto>): DataResponsePageOrderDto => r.body)
    );
  }

  /** Path part for operation `getAllOrders1()` */
  static readonly GetAllOrders1Path = '/api/v1/orders/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllOrders1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrders1$Response(params?: GetAllOrders1$Params, context?: HttpContext): Observable<StrictHttpResponse<DataResponsePageOrderDto>> {
    return getAllOrders1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllOrders1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllOrders1(params?: GetAllOrders1$Params, context?: HttpContext): Observable<DataResponsePageOrderDto> {
    return this.getAllOrders1$Response(params, context).pipe(
      map((r: StrictHttpResponse<DataResponsePageOrderDto>): DataResponsePageOrderDto => r.body)
    );
  }

  /** Path part for operation `deleteOrder()` */
  static readonly DeleteOrderPath = '/api/v1/orders/delete/{voucherId}/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteOrder()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOrder$Response(params: DeleteOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageResponse>> {
    return deleteOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteOrder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteOrder(params: DeleteOrder$Params, context?: HttpContext): Observable<MessageResponse> {
    return this.deleteOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageResponse>): MessageResponse => r.body)
    );
  }

}
