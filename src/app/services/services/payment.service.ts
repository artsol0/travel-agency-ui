/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { cancelPayment } from '../fn/payment/cancel-payment';
import { CancelPayment$Params } from '../fn/payment/cancel-payment';
import { DataResponseStripeResponse } from '../models/data-response-stripe-response';
import { increaseUserBalance } from '../fn/payment/increase-user-balance';
import { IncreaseUserBalance$Params } from '../fn/payment/increase-user-balance';
import { MessageResponse } from '../models/message-response';
import { successPayment } from '../fn/payment/success-payment';
import { SuccessPayment$Params } from '../fn/payment/success-payment';


/**
 * HTTP methods
 */
@Injectable({ providedIn: 'root' })
export class PaymentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `increaseUserBalance()` */
  static readonly IncreaseUserBalancePath = '/api/v1/payment/balance/increase';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `increaseUserBalance()` instead.
   *
   * This method doesn't expect any request body.
   */
  increaseUserBalance$Response(params: IncreaseUserBalance$Params, context?: HttpContext): Observable<StrictHttpResponse<DataResponseStripeResponse>> {
    return increaseUserBalance(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `increaseUserBalance$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  increaseUserBalance(params: IncreaseUserBalance$Params, context?: HttpContext): Observable<DataResponseStripeResponse> {
    return this.increaseUserBalance$Response(params, context).pipe(
      map((r: StrictHttpResponse<DataResponseStripeResponse>): DataResponseStripeResponse => r.body)
    );
  }

  /** Path part for operation `successPayment()` */
  static readonly SuccessPaymentPath = '/api/v1/payment/success';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `successPayment()` instead.
   *
   * This method doesn't expect any request body.
   */
  successPayment$Response(params: SuccessPayment$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageResponse>> {
    return successPayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `successPayment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  successPayment(params: SuccessPayment$Params, context?: HttpContext): Observable<MessageResponse> {
    return this.successPayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageResponse>): MessageResponse => r.body)
    );
  }

  /** Path part for operation `cancelPayment()` */
  static readonly CancelPaymentPath = '/api/v1/payment/cancel';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cancelPayment()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelPayment$Response(params: CancelPayment$Params, context?: HttpContext): Observable<StrictHttpResponse<MessageResponse>> {
    return cancelPayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cancelPayment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelPayment(params: CancelPayment$Params, context?: HttpContext): Observable<MessageResponse> {
    return this.cancelPayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<MessageResponse>): MessageResponse => r.body)
    );
  }

}
